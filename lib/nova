
# Dependencies:
# # ``functions`` file
# # ``DEST``, ``DATA_DIR`` must be defined
# # ``SERVICE_{TENANT_NAME|PASSWORD}`` must be defined
# # ``LIBVIRT_TYPE`` must be defined
# # ``INSTANCE_NAME_PREFIX`` must be defined


############## DEFAULT CONFIG FOR NOVA ##################

# Set up default directories
NOVA_DIR=$DEST/nova
NOVA_STATE_PATH=${NOVA_STATE_PATH:=$DATA_DIR/nova}
# INSTANCES_PATH isD the previous name for this
NOVA_INSTANCES_PATH=${NOVA_INSTANCES_PATH:=${INSTANCES_PATH:=$NOVA_STATE_PATH/instances}}

NOVA_CONF_DIR=/etc/nova
NOVA_CONF=$NOVA_CONF_DIR/nova.conf
NOVA_API_PASTE_INI=${NOVA_API_PASTE_INI:-$NOVA_CONF_DIR/api-paste.ini}
MY_IP=${MY_IP:-127.0.0.1}

API_RATE_LIMIT=${API_RATE_LIMIT:-"False"}

# Nova supports pluggable schedulers. The default ``FilterScheduler``
# should work in most cases.
SCHEDULER=${SCHEDULER:-nova.scheduler.filter_scheduler.FilterScheduler}

QEMU_CONF=/etc/libvirt/qemu.conf

#Networking setup
FLOATING_RANGE=${FLOATING_RANGE:-172.24.4.224/28}
FIXED_RANGE=${FIXED_RANGE:-10.0.0.0/24}
FIXED_NETWORK_SIZE=${FIXED_NETWORK_SIZE:-256}
NETWORK_GATEWAY=${NETWORK_GATEWAY:-10.0.0.1}

PUBLIC_INTERFACE_DEFAULT=br100
FLAT_NETWORK_BRIDGE_DEFAULT=br100
GUEST_INTERFACE_DEFAULT=eth0

PUBLIC_INTERFACE=${PUBLIC_INTERFACE:-$PUBLIC_INTERFACE_DEFAULT}
NET_MAN=${NET_MAN:-FlatDHCPManager}
FLAT_NETWORK_BRIDGE=${FLAT_NETWORK_BRIDGE:-$FLAT_NETWORK_BRIDGE_DEFAULT}
VLAN_INTERFACE=${VLAN_INTERFACE:-$GUEST_INTERFACE_DEFAULT}

######################### INIT ############################

# Support entry points installation of console scripts
if [[ -d $NOVA_DIR/bin ]]; then
    NOVA_BIN_DIR=$NOVA_DIR/bin
else
    NOVA_BIN_DIR=/opt/stack/nova/bin
fi

################### HELPER FUNCTIONS #####################

# add configuration to NOVA_CONF
function add_nova_opt {
    echo "$1" >>$NOVA_CONF
}

# Helper to clean iptables rules
function clean_iptables() {
    # Delete rules
    sudo iptables -S -v | sed "s/-c [0-9]* [0-9]* //g" | grep "nova" | grep "\-A" | sed "s/-A/-D/g" | awk '{print "sudo iptables",$0}' | bash
    # Delete nat rules
    sudo iptables -S -v -t nat | sed "s/-c [0-9]* [0-9]* //g" | grep "nova" | grep "\-A" | sed "s/-A/-D/g" | awk '{print "sudo iptables -t nat",$0}' | bash
    # Delete chains
    sudo iptables -S -v | sed "s/-c [0-9]* [0-9]* //g" | grep "nova" | grep "\-N" | sed "s/-N/-X/g" | awk '{print "sudo iptables",$0}' | bash
    # Delete nat chains
    sudo iptables -S -v -t nat | sed "s/-c [0-9]* [0-9]* //g" | grep "nova" | grep "\-N" | sed "s/-N/-X/g" | awk '{print "sudo iptables -t nat",$0}' | bash
}

# cleanup_nova() - Remove residual data files, anything left over from previous
# runs that a clean run would need to clean up
function cleanup_nova() {
    if is_service_enabled n-cpu; then
        # Clean iptables from previous runs
        clean_iptables

        # Destroy old instances
        instances=`sudo virsh list --all | grep $INSTANCE_NAME_PREFIX | sed "s/.*\($INSTANCE_NAME_PREFIX[0-9a-fA-F]*\).*/\1/g"`
        if [ ! "$instances" = "" ]; then
            echo $instances | xargs -n1 sudo virsh destroy || true
            echo $instances | xargs -n1 sudo virsh undefine || true
        fi

        sudo rm -rf $NOVA_INSTANCES_PATH/*
    fi
}

# configure_nova() - Set config files, create data dirs, etc
function configure_nova() {

    # Put config files in ``/etc/nova`` for everyone to find
    if [[ ! -d $NOVA_CONF_DIR ]]; then
        sudo mkdir -p $NOVA_CONF_DIR
    fi

    cp -p $NOVA_DIR/etc/nova/policy.json $NOVA_CONF_DIR

    if is_service_enabled n-api; then

        rm -f $NOVA_DIR/bin/nova-api-paste.ini
        cp $NOVA_DIR/etc/nova/api-paste.ini $NOVA_CONF_DIR

        sed -e "
            /^admin_token/i admin_tenant_name = $SERVICE_TENANT_NAME
            /admin_tenant_name/s/^.*$/admin_tenant_name = $SERVICE_TENANT_NAME/;
            /admin_user/s/^.*$/admin_user = nova/;
            /admin_password/s/^.*$/admin_password = $SERVICE_PASSWORD/;
            s,%SERVICE_TENANT_NAME%,$SERVICE_TENANT_NAME,g;
            s,%SERVICE_TOKEN%,$SERVICE_TOKEN,g;
        " -i $NOVA_API_PASTE_INI
    fi

    if is_service_enabled n-cpu; then
        sudo sysctl -w net.ipv4.ip_forward=1
        sudo modprobe nbd || true

        if [[ "$LIBVIRT_TYPE" == "kvm" ]]; then
            sudo modprobe kvm || true
            if [ ! -e /dev/kvm ]; then
                echo "WARNING: Switching to QEMU"
                LIBVIRT_TYPE=qemu
                if which selinuxenabled 2>&1 > /dev/null && selinuxenabled; then
                    # https://bugzilla.redhat.com/show_bug.cgi?id=753589
                    sudo setsebool virt_use_execmem on
                fi
            fi
        fi

        if ! grep ^libvirtd: /etc/group >/dev/null; then
            sudo groupadd libvirtd
        fi

        sudo bash -c 'cat <<EOF >/etc/polkit-1/localauthority/50-local.d/50-libvirt-remote-access.pkla
[libvirt Management Access]
Identity=unix-group:libvirtd
Action=org.libvirt.unix.manage
ResultAny=yes
ResultInactive=yes
ResultActive=yes
EOF'
        LIBVIRT_DAEMON=libvirtd
        sudo usermod -a -G libvirtd root
        service $LIBVIRT_DAEMON restart

        # Instance Storage
        # ----------------

        mkdir -p $NOVA_INSTANCES_PATH

        # You can specify a different disk to be mounted and used for backing the
        # virtual machines. If there is a partition labeled nova-instances we
        # mount it (ext filesystems can be labeled via e2label).
        if [ -L /dev/disk/by-label/nova-instances ]; then
            if ! mount -n | grep -q $NOVA_INSTANCES_PATH; then
                sudo mount -L nova-instances $NOVA_INSTANCES_PATH
            fi
        fi

        # Clean up old instances
        cleanup_nova
    fi
}

# create_nova_conf() - Create a new nova.conf file
function create_nova_conf() {
    # Remove legacy ``nova.conf``
    rm -f $NOVA_DIR/bin/nova.conf

    # (Re)create ``nova.conf``
    rm -f $NOVA_CONF
    add_nova_opt "[DEFAULT]"
    add_nova_opt "verbose=True"
    add_nova_opt "vncserver_listen=0.0.0.0"
    add_nova_opt "auth_strategy=keystone"
    add_nova_opt "allow_resize_to_same_host=True"
    add_nova_opt "api_paste_config=$NOVA_API_PASTE_INI"
    add_nova_opt "compute_scheduler_driver=$SCHEDULER"
    add_nova_opt "dhcpbridge_flagfile=$NOVA_CONF"
    add_nova_opt "dhcpbridge=/usr/bin/nova-dhcpbridge"
    add_nova_opt "force_dhcp_release=False"
    add_nova_opt "fixed_range=$FIXED_RANGE"
    add_nova_opt "osapi_compute_extension=nova.api.openstack.compute.contrib.standard_extensions"
    add_nova_opt "my_ip=$MY_IP"
    local dburl
    database_connection_url dburl nova
    add_nova_opt "sql_connection=$dburl"
    add_nova_opt "libvirt_type=$LIBVIRT_TYPE"
    add_nova_opt "libvirt_cpu_mode=none"
    add_nova_opt "instance_name_template=${INSTANCE_NAME_PREFIX}%08x"

    add_nova_opt "state_path=$NOVA_STATE_PATH"
    add_nova_opt "lock_path=$NOVA_STATE_PATH"
    add_nova_opt "instances_path=$NOVA_INSTANCES_PATH"
    add_nova_opt "send_arp_for_ha=True"

    mkdir -p /var/log/nova
    add_nova_opt "use_syslog=False"
    add_nova_opt "logdir=/var/log/nova"
    add_nova_opt "compute_driver=libvirt.LibvirtDriver"
    if is_service_enabled zeromq; then
        add_nova_opt "rpc_backend=nova.openstack.common.rpc.impl_zmq"
    elif is_service_enabled qpid; then
        add_nova_opt "rpc_backend=nova.rpc.impl_qpid"
    elif [ -n "$RABBIT_HOST" ] && [ -n "$RABBIT_PASSWORD" ]; then
        add_nova_opt "rabbit_host=$RABBIT_HOST"
        add_nova_opt "rabbit_password=$RABBIT_PASSWORD"
    fi

    if is_service_enabled n-cpu ; then
        if [ -n "$NOVNCPROXY_BASE_URL" ] ; then
            add_nova_opt "novncproxy_base_url=$NOVNCPROXY_BASE_URL"
        fi
        add_nova_opt "vncserver_proxyclient_address=\$my_ip"
    fi

    add_nova_opt "glance_api_servers=$GLANCE_HOSTPORT"

    if is_service_enabled n-net ; then
        add_nova_opt "network_manager=nova.network.manager.$NET_MAN"
        add_nova_opt "public_interface=$PUBLIC_INTERFACE"
        add_nova_opt "vlan_interface=$VLAN_INTERFACE"
        add_nova_opt "flat_network_bridge=$FLAT_NETWORK_BRIDGE"
        add_nova_opt "multi_host=True"
        add_nova_opt "send_arp_for_ha=True"
        if [ -n "$FLAT_INTERFACE" ]; then
            add_nova_opt "flat_interface=$FLAT_INTERFACE"
        fi
    fi

    # Provide some transition from ``EXTRA_FLAGS`` to ``EXTRA_OPTS``
    if [[ -z "$EXTRA_OPTS" && -n "$EXTRA_FLAGS" ]]; then
        EXTRA_OPTS=$EXTRA_FLAGS
    fi

    # Define extra nova conf flags by defining the array ``EXTRA_OPTS``.
    # For Example: ``EXTRA_OPTS=(foo=true bar=2)``
    for I in "${EXTRA_OPTS[@]}"; do
        # Attempt to convert flags to options
        add_nova_opt ${I//--}
    done
}

# init_nova() - Initialize databases, etc.
function init_nova() {
    if is_service_enabled mysql && is_service_enabled nova; then
        recreate_database nova latin1
        $NOVA_BIN_DIR/nova-manage db sync
    fi
}

function create_network() {
    nova-manage network create test_pool $FIXED_RANGE 1 $FIXED_NETWORK_SIZE
}

# service_nova() - Nova system level service config
function service_nova() {
    if is_service_enabled n-api; then
        if [[ ! -x '/etc/rc.d/init.d/openstack-nova-api' ]]; then
            chmod 755 /etc/rc.d/init.d/openstack-nova-api

            if [[ ! `chkconfig --list |grep 'openstack-nova-api'` ]]; then
                chkconfig --add openstack-nova-api
                chkconfig --level 35 openstack-nova-api on
            fi
        fi

        service openstack-nova-api $1
    fi

    if is_service_enabled n-cpu; then
        if [[ ! -x '/etc/rc.d/init.d/openstack-nova-compute' ]]; then
            chmod 755 /etc/rc.d/init.d/openstack-nova-compute

            if [[ ! `chkconfig --list |grep 'openstack-nova-compute'` ]]; then
                chkconfig --add openstack-nova-compute
                chkconfig --level 35 openstack-nova-compute on
            fi
        fi

        service openstack-nova-compute $1
    fi

    if is_service_enabled n-net; then
        if [[ ! -x '/etc/rc.d/init.d/openstack-nova-network' ]]; then
            chmod 755 /etc/rc.d/init.d/openstack-nova-network

            if [[ ! `chkconfig --list |grep 'openstack-nova-network'` ]]; then
                chkconfig --add openstack-nova-network
                chkconfig --level 35 openstack-nova-network on
            fi
        fi

        service openstack-nova-network $1
    fi

    if is_service_enabled n-sch; then
        if [[ ! -x '/etc/rc.d/init.d/openstack-nova-scheduler' ]]; then
            chmod 755 /etc/rc.d/init.d/openstack-nova-scheduler

            if [[ ! `chkconfig --list |grep 'openstack-nova-scheduler'` ]]; then
                chkconfig --add openstack-nova-scheduler
                chkconfig --level 35 openstack-nova-scheduler on
            fi
        fi

        service openstack-nova-scheduler $1
    fi

    if is_service_enabled n-novnc; then
        if [[ ! -x '/etc/rc.d/init.d/openstack-nova-consoleauth' ]]; then
            chmod 755 /etc/rc.d/init.d/openstack-nova-consoleauth

            if [[ ! `chkconfig --list |grep 'openstack-nova-consoleauth'` ]]; then
                chkconfig --add openstack-nova-consoleauth
                chkconfig --level 35 openstack-nova-consoleauth on
            fi
        fi

        if [[!  -x '/etc/rc.d/init.d/openstack-nova-novncproxy' ]]; then
            chmod 755 /etc/rc.d/init.d/openstack-nova-novncproxy

            if [[ ! `chkconfig --list |grep 'openstack-nova-novncproxy'` ]]; then
                chkconfig --add openstack-nova-novncproxy
                chkconfig --level 35 openstack-nova-novncproxy on
            fi
        fi

        service openstack-nova-consoleauth $1
        service openstack-nova-novncproxy $1
    fi
}